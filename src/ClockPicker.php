<?php


namespace ziya\ClockPicker;


use yii\base\Exception;
use yii\base\Widget;
use yii\helpers\Html;
use yii\web\JsExpression;
use yii\web\View;

class ClockPicker extends Widget
{
    public $bootstrap = true;
    public $name;
    public $value;
    public $model;
    public $attribute;
    public $options = [];
    public $fromNow = 0;
    public $pluginOptions = [];
    public $default;
    public $placement = 'top';
    public $align = 'left';
    public $doneText = 'Done';
    public $autoClose = false;
    public $vibrate = true;

    public const EVENTS = [
        'init' => '',
        'beforeShow' => '',
        'afterShow' => '',
        'beforeHide' => '',
        'afterHide' => '',
        'beforeHourSelect' => '',
        'afterHourSelect' => '',
        'beforeDone' => '',
        'afterDone' => '',
    ];

    private $jsOptions = [];

    public function init()
    {
        parent::init();
        $this->pluginOptions = array_merge(
            self::EVENTS,
            $this->pluginOptions
        );
        if ($this->bootstrap) {
            $view = $this->getView();
            ClockPickerBootstrapAssets::register($view);
        } else {
            $view = $this->getView();
            ClockPickerJqueryAssets::register($view);
        }
        $this->perepareJsOptions();
    }

    /**
     * @return bool
     * @throws Exception
     */
    public function beforeRun():bool
    {
        $this->validate();
        return parent::beforeRun(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws Exception
     */
    public function validate(): void
    {
        if ($this->model !== null) {
            if ($this->attribute === null) {
                throw new Exception('attribute property must be specified when used with model');
            }
        } else {
            if ($this->name === null) {
                throw new Exception('name property must be set when used without model');
            }
        }

    }

    public function input(): string
    {
        if ($this->model !== null) {
            return Html::activeTextInput($this->model, $this->attribute, ['class' => 'form-control']);
        }
        return Html::textInput($this->name, $this->value, ['class' => 'form-control']);
    }

    /**
     * @return string
     */
    public function run(): string
    {
        $this->getView()->registerJs('
         $(".clockpicker").clockpicker(' . new JsExpression(json_encode($this->jsOptions)) . ');
        ', View::POS_END);
        return Html::tag('div',
            $this->input()
            . Html::tag(
                'span',
                Html::tag(
                    'span',
                    '',
                    ['class' => 'glyphicon glyphicon-time']
                ),
                ['class' => 'input-group-addon']
            ),
            ['class' => 'input-group clockpicker']
        );
    }

    private function perepareJsOptions(): void
    {
        $this->jsOptions = [
            'default' => $this->default,
            'placement' => $this->placement,
            'align' => $this->align,
            'donetext' => $this->doneText,
            'autoclose' => $this->autoClose,
            'vibrate' => $this->vibrate,
            'fromnow' => $this->fromNow,
            'init' => "function(){{$this->pluginOptions['init']}}",
            'beforeShow' => "function(){{$this->pluginOptions['beforeShow']}}",
            'afterShow' => "function(){{$this->pluginOptions['afterShow']}}",
            'beforeHide' => "function(){{$this->pluginOptions['beforeHide']}}",
            'afterHide' => "function(){{$this->pluginOptions['afterHide']}}",
            'beforeHourSelect' => "function(){{$this->pluginOptions['beforeHourSelect']}}",
            'afterHourSelect' => "function(){{$this->pluginOptions['afterHourSelect']}}",
            'beforeDone' => "function(){{$this->pluginOptions['beforeDone']}}",
            'afterDone' => "function(){{$this->pluginOptions['afterDone']}}"
        ];
    }
}