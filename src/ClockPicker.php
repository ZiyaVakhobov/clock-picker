<?php


namespace ziya\ClockPicker;


use yii\base\Exception;
use yii\base\Widget;
use yii\helpers\Html;
use yii\helpers\Json;
use yii\web\JsExpression;
use yii\web\View;

class ClockPicker extends Widget
{
    public $bootstrap = true;
    public $name;
    public $value;
    public $visible = true;
    public $model;
    public $attribute;
    public $options = [];
    public $fromNow = 0;
    public $pluginOptions = [];
    public $default;
    public $placement = 'top';
    public $align = 'left';
    public $doneText = 'Done';
    public $autoClose = false;
    public $vibrate = true;
    public $addon = [];
    public $addonWrapperClass = 'input-group-addon';
    private const ADDON = [
        'tag'=>'span',
        'content'=>'',
        'options'=>['class' => 'glyphicon glyphicon-time']
    ];

    private const EVENTS = [
        'init' => '',
        'beforeShow' => '',
        'afterShow' => '',
        'beforeHide' => '',
        'afterHide' => '',
        'beforeHourSelect' => '',
        'afterHourSelect' => '',
        'beforeDone' => '',
        'afterDone' => '',
    ];

    private $jsOptions = [];

    public function init()
    {
        parent::init();
        $this->pluginOptions = array_merge(
            self::EVENTS,
            $this->pluginOptions
        );
        if ($this->addon !== false) {
            $this->addon = array_merge(
                self::ADDON,
                $this->addon
            );
        }
        $this->options = array_merge(['class' => 'form-control', 'type'=>'time'],$this->options);

        if ($this->bootstrap) {
            $view = $this->getView();
            ClockPickerBootstrapAssets::register($view);
        } else {
            $view = $this->getView();
            ClockPickerJqueryAssets::register($view);
        }
        $this->perepareJsOptions();
    }

    /**
     * @return bool
     * @throws Exception
     */
    public function beforeRun():bool
    {
        $this->validate();
        return parent::beforeRun(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws Exception
     */
    public function validate(): void
    {
        if ($this->model !== null) {
            if ($this->attribute === null) {
                throw new Exception('attribute property must be specified when used with model');
            }
        } else {
            if ($this->name === null) {
                throw new Exception('name property must be set when used without model');
            }
        }

    }

    public function input(): string
    {
        if ($this->model !== null) {
            return Html::activeTextInput($this->model, $this->attribute, $this->options);
        }
        return Html::textInput($this->name, $this->value, $this->options);
    }

    /**
     * @return string
     */
    public function run(): string
    {
        if (!$this->visible) {
            return '';
        }
        $this->getView()->registerJs('
         $(".clockpicker").clockpicker(' . new JsExpression(Json::encode($this->jsOptions)) . ');
        ', View::POS_END);
        $addonWrapper = '';
        if ($this->addon !==false) {
            $addonWrapper= Html::tag(
                'span',
                Html::tag(
                    $this->addon['tag'],
                    $this->addon['content'],
                    $this->addon['options']
                ),
                ['class' => $this->addonWrapperClass]
            );
        }
        return Html::tag('div',
            $this->input()
            . $addonWrapper,
            ['class' => 'input-group clockpicker']
        );
    }

    private function perepareJsOptions(): void
    {
        $this->jsOptions = [
            'default' => $this->default,
            'placement' => $this->placement,
            'align' => $this->align,
            'donetext' => $this->doneText,
            'autoclose' => $this->autoClose,
            'vibrate' => $this->vibrate,
            'fromnow' => $this->fromNow,
            'init' => new JsExpression("function(){{$this->pluginOptions['init']}}"),
            'beforeShow' => new JsExpression("function(){{$this->pluginOptions['beforeShow']}}"),
            'afterShow' => new JsExpression("function(){{$this->pluginOptions['afterShow']}}"),
            'beforeHide' => new JsExpression("function(){{$this->pluginOptions['beforeHide']}}"),
            'afterHide' => new JsExpression("function(){{$this->pluginOptions['afterHide']}}"),
            'beforeHourSelect' => new JsExpression("function(){{$this->pluginOptions['beforeHourSelect']}}"),
            'afterHourSelect' => new JsExpression("function(){{$this->pluginOptions['afterHourSelect']}}"),
            'beforeDone' => new JsExpression("function(){{$this->pluginOptions['beforeDone']}}"),
            'afterDone' => new JsExpression("function(){{$this->pluginOptions['afterDone']}}")
        ];
    }
}